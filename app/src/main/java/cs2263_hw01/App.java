/*
 * This Java source file was generated by the Gradle 'init' task.
 */

/**
 * @author Autumn Clark
 * CS 2263
 * Homework 2
 * Command line parser that takes a few options and evaluates simple mathematical expressions
 */

package cs2263_hw01;

import org.apache.commons.cli.*;
import java.io.*;
import java.util.Scanner;
import static java.lang.System.exit;

public class App {

    public static void main(String[] args) {
        // Create a set of Apache Commons Options
        Options options = new Options();
        options.addOption("h", false, "Get help for usage");
        options.addOption(Option.builder()
                .longOpt("help")
                .desc("Get help for usage")
                .build());
        options.addOption("o", true, "Write the output to the specified file");
        options.addOption(Option.builder()
                .longOpt("output")
                .hasArg()
                .argName("file")
                .desc("Write the output to the specified file")
                .build());
        options.addOption("b", true, "Calculate the expression stored in the file");
        options.addOption(Option.builder()
                .longOpt("batch")
                .hasArg()
                .argName("file")
                .desc("Calculate the expression stored in the file")
                .build());

        CommandLineParser parser = new DefaultParser();
        String oPath = null;
        try {
            CommandLine cmd = parser.parse(options, args);
            if(cmd.hasOption("h") || cmd.hasOption("help")){
                System.out.println("Usage eval [OPTIONS]\nEvaluation of simple mathematical expressions\n\n" +
                        "-b,--batch <file>\tbatch file containing expressions to evaluate\n" +
                        "-h,--help\t\tprint usage message\n" +
                        "-o,--output <file>\toutput file\n\n" +
                        "Copyright (C) 2022 Autumn M Clark");
                exit(0);
            }
            if(cmd.hasOption("o")) {
                oPath = cmd.getOptionValue("o");
            }
            if(cmd.hasOption("output")){
                oPath = cmd.getOptionValue("output");
            }
            if(cmd.hasOption("b")){
                FileEvaluate(cmd.getOptionValue("b"), oPath);
            }
            if(cmd.hasOption("batch")){
                FileEvaluate(cmd.getOptionValue("batch"), oPath);
            }
            if(!(cmd.hasOption("batch") || cmd.hasOption("b"))){
                CMDEvaluate(oPath);
            }
        } catch (ParseException exp) {
            System.out.println("Unexpected exception: " + exp.getMessage());
        }
    }

    /**
     * Loops the command line infinitely and takes user input; Prints to the terminal and the specified file
     * @param output The file to be written to
     */
    private static void CMDEvaluate(String output){
        Evaluator evaluator = new Evaluator();
        System.out.println("Type 'exit', 'stop', or 'end' to close the program.");
        System.out.println("Type the expression you want to evaluate:");
        try {
            Scanner scanner = new Scanner(System.in);
            while(true) {
                String input = scanner.nextLine();
                if (input.equals("exit") || input.equals("end") || input.equals("stop")) {
                    scanner.close();
                    exit(0);
                }
                Print(input, output);
                evaluator.setPassedInput(input);
                try {
                    double solution = evaluator.Evaluate();;
                    Print(solution, output);
                } catch (Exception e) {
                    System.out.println("Your input was not understood. Ensure your expression is of the form\n\t" +
                            "\'5*6/2-2.1\' or \'5 * 6 / 2 - 2.1\'");
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Evaluates expressions located in a file and prints the solution to the terminal and the specified file
     * @param path The path to the file to be read from
     * @param output The file to be written to
     */
    private static void FileEvaluate(String path, String output){
        try {
            FileInputStream fstream = new FileInputStream("../" + path);
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line;
            while((line = br.readLine()) != null){
                Evaluator evaluator = new Evaluator();
                Print(line, output);
                evaluator.setPassedInput(line);
                try {
                    double solution = evaluator.Evaluate();;
                    Print(solution, output);
                } catch (Exception e) {
                    System.out.println("A line was not understood. Ensure your expression is of the form\n\t" +
                            "\'5*6/2-2.1\' or \'5 * 6 / 2 - 2.1\'");
                }
            }
            in.close();
        } catch(Exception e){
            System.out.println("There was an issue with your file. Please check the path is correct.\n"+
                    e.getMessage());
        }
    }

    /**
     * Prints a String to the standard output
     * @param input A mathematical expression in String form
     * @param path Pathway to the file to be written to
     */
    private static void Print(String input, String path){
        if(path == null){
            System.out.println("You entered: " + input);
        } else {
            try {
                FileWriter writer = new FileWriter("../" + path, true);
                writer.write("You entered: " + input + "\n");
                writer.close();
            } catch (Exception e) {
                System.out.println("Something went wrong. " + e.getMessage());
            }
            System.out.println("You entered: " + input);
        }
    }

    /**
     * Prints a double to the standard output
     * @param input The solution to an expression in double form
     * @param path Pathway to the file to be written to
     */
    private static void Print(double input, String path){
        if(path == null){
            System.out.println("Solution: " + input);
        } else {
            try {
                FileWriter writer = new FileWriter("../" + path, true);
                writer.write("Solution: " + input + "\n");
                writer.close();
            } catch (Exception e) {
                System.out.println("Something went wrong. " + e.getMessage());
            }
            System.out.println("Solution: " + input);
        }
    }
}
