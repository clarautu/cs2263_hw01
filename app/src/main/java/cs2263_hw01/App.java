/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs2263_hw01;

import org.apache.commons.cli.*;

import javax.xml.crypto.Data;
import java.io.*;
import java.util.Scanner;

import static java.lang.System.exit;

public class App {

    public static void main(String[] args) {
        // Create a set of Apache Commons Options
        Options options = new Options();
        options.addOption("h", false, "Get help for usage");
        options.addOption(Option.builder()
                .longOpt("help")
                .desc("Get help for usage")
                .build());
        options.addOption("o", true, "Write the output to the specified file");
        options.addOption(Option.builder()
                .longOpt("output")
                .hasArg()
                .argName("file")
                .desc("Write the output to the specified file")
                .build());
        options.addOption("b", true, "Calculate the expression stored in the file");
        options.addOption(Option.builder()
                .longOpt("batch")
                .hasArg()
                .argName("file")
                .desc("Calculate the expression stored in the file")
                .build());

        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine cmd = parser.parse(options, args);
            if(cmd.hasOption("h") || cmd.hasOption("help")){
                System.out.println("Usage eval [OPTIONS]\nEvaluation of simple mathematical expressions\n\n" +
                        "-b,--batch <file>\tbatch file containing expressions to evaluate\n" +
                        "-h,--help\t\tprint usage message\n" +
                        "-o,--output <file>\toutput file\n\n" +
                        "Copyright (C) 2022 Autumn M Clark");
                exit(0);
            }
            if(cmd.hasOption("o")) {
                System.out.println("Output value: " + cmd.getOptionValue("o"));
            }
            if(cmd.hasOption("output")){
                System.out.println("Output value: " + cmd.getOptionValue("output"));
            }
            if(cmd.hasOption("b")){
                System.out.println("Batch value: " + cmd.getOptionValue("b"));
                FileEvaluate(cmd.getOptionValue("b"));
            }
            if(cmd.hasOption("batch")){
                System.out.println("Batch value: " + cmd.getOptionValue("batch"));
                FileEvaluate(cmd.getOptionValue("batch"));
            }
            if(!(cmd.hasOption("batch") || cmd.hasOption("b"))){
                System.out.println("Made it to CMDEvaluate()");
                CMDEvaluate();
            }
        } catch (ParseException exp) {
            System.out.println("Unexpected exception: " + exp.getMessage());
        }
    }

    /**
     * Loops the command line infinitely and takes user input
     */
    private static void CMDEvaluate(){
        Evaluator evaluator = new Evaluator();
        System.out.println("Type 'exit', 'stop', or 'end' to close the program.");
        System.out.println("Type the expression you want to evaluate:");
        try {
            Scanner scanner = new Scanner(System.in);
            while(true) {
                String input = scanner.nextLine();
                if (input.equals("exit") || input.equals("end") || input.equals("stop")) {
                    scanner.close();
                    exit(0);
                }
                Print(input);
                evaluator.setPassedInput(input);
                try {
                    double solution = evaluator.Evaluate();;
                    Print(solution);
                } catch (Exception e) {
                    System.out.println("Your input was not understood. Ensure your expression is of the form\n\t" +
                            "\'5*6/2-2.1\' or \'5 * 6 / 2 - 2.1\'");
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Evaluates expressions located in a file
     * @param path The path to the file to be read from
     */
    private static void FileEvaluate(String path){

        try {
            FileInputStream fstream = new FileInputStream("../" + path);
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line;
            while((line = br.readLine()) != null){
                Evaluator evaluator = new Evaluator();
                Print(line);
                evaluator.setPassedInput(line);
                try {
                    double solution = evaluator.Evaluate();;
                    Print(solution);
                } catch (Exception e) {
                    System.out.println("A line was not understood. Ensure your expression is of the form\n\t" +
                            "\'5*6/2-2.1\' or \'5 * 6 / 2 - 2.1\'");
                }
            }
            in.close();
        } catch(Exception e){
            System.out.println("There was an issue with your file. Please check the path is correct.\n"+
                    e.getMessage());
        }
    }

    /**
     * Prints a String to the standard output
     * @param input A mathematical expression in String form
     */
    private static void Print(String input){
        System.out.println("You entered: " + input);
    }

    /**
     * Prints a double to the standard output
     * @param solution The solution to an expression in double form
     */
    private static void Print(double solution){
        System.out.println("Solution: " + solution);
    }
}
